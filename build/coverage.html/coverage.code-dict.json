{"/home/travis/build/npmtest/node-npmtest-node-dm/test.js":"/* istanbul instrument in package npmtest_node_dm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-dm/lib.npmtest_node_dm.js":"/* istanbul instrument in package npmtest_node_dm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_dm = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_dm = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-dm/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-dm && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_dm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_dm\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_dm.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_dm.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_dm.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_dm.__dirname + '/lib.npmtest_node_dm.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-dm/node_modules/node-dm/index.js":"var Manager = require('./src/manager');\nvar Container = require('./src/container');\nvar dm = new Manager(new Container());\n\nmodule.exports = dm;","/home/travis/build/npmtest/node-npmtest-node-dm/node_modules/node-dm/src/manager.js":"'use strict';\n\nglobal.Promise = global.Promise || require('promise');\n\n/**\n * @param {Container} container\n * @class\n */\nfunction Manager(container) {\n  this._container = container;\n  this._config = {\n    dependencyTimeout: 2500\n  };\n}\n\n/**\n * @param {Object} config\n */\nManager.prototype.config = function (config) {\n  for (var i in config) {\n    if (config.hasOwnProperty(i)) {\n      this._config[i] = config[i];\n    }\n  }\n};\n\n/**\n * @param {string} name\n * @param {string} type\n * @param {*} value\n * @param {string[]} dependencyNames\n * @returns {Manager}\n */\nManager.prototype.provide = function (name, type, value, dependencyNames) {\n  this._container.get(name).provide(type, value, dependencyNames);\n  return this;\n};\n\n/**\n * @param {string} name\n * @param {Function} constructor\n * @param {string[]} [dependencyNames]\n * @returns {Manager}\n */\nManager.prototype.class = function (name, constructor, dependencyNames) {\n  if (dependencyNames === undefined) {\n    dependencyNames = constructor.$depends;\n  }\n\n  this.provide(name, 'class', constructor, dependencyNames);\n  return this;\n};\n\n/**\n * @param {string} name\n * @param {Function} factory\n * @param {string[]} [dependencyNames]\n * @returns {Manager}\n */\nManager.prototype.factory = function (name, factory, dependencyNames) {\n  if (dependencyNames === undefined) {\n    dependencyNames = factory.$depends;\n  }\n\n  this.provide(name, 'factory', factory, dependencyNames);\n  return this;\n};\n\n/**\n * @param {string} name\n * @param {*} value\n * @returns {Manager}\n */\nManager.prototype.value = function (name, value) {\n  this.provide(name, 'value', value, []);\n  return this;\n};\n\n/**\n * @param {Array|Object} dependencyNames\n * @returns {Promise}\n */\nManager.prototype.resolve = function (dependencyNames) {\n  if (!this._config.dependencyTimeout) {\n    return this._container.resolve(dependencyNames);\n  }\n  else {\n    return new Promise(function (resolve, reject) {\n      this._container.resolve(dependencyNames).then(resolve, reject);\n\n      setTimeout(\n        function () {\n          var unresolvedNames = this._container\n            .getAll()\n            .filter(function (dependency) { return !dependency.isResolved(); })\n            .map(function (dependency) { return dependency.getName(); });\n\n          if (unresolvedNames.length === 1) {\n            reject(new Error(\n              'Dependency \"' +\n              unresolvedNames[0] +\n              '\" was not resolved in ' +\n              this._config.dependencyTimeout +\n              'ms'\n            ));\n          }\n          else if (unresolvedNames.length > 1) {\n            unresolvedNames = unresolvedNames.map(function (name) { return '\"' + name + '\"'; });\n            reject(new Error(\n              'Dependencies \"' +\n              unresolvedNames.join(', ') +\n              '\" were not resolved in ' +\n              this._config.dependencyTimeout +\n              'ms'\n            ));\n          }\n        }.bind(this),\n        this._config.dependencyTimeout\n      );\n    }.bind(this));\n  }\n};\n\n/**\n * @param {string} dependencyName\n * @returns {Promise}\n */\nManager.prototype.run = function (dependencyName) {\n  return this.resolve([dependencyName]);\n};\n\n/**\n * @param {...string} dependencyNames\n * @returns {object}\n */\nManager.prototype.object = function (dependencyNames) {\n  var obj = {};\n\n  Array.prototype.slice.call(arguments).forEach(function (key) {\n    obj[key] = true;\n  });\n\n  return obj;\n};\n\nmodule.exports = Manager;","/home/travis/build/npmtest/node-npmtest-node-dm/node_modules/node-dm/src/container.js":"'use strict';\n\nglobal.Promise = global.Promise || require('promise');\n\nvar Dependency = require('./dependency');\n\n/**\n * @class\n */\nfunction Container() {\n  /**\n   * @type {Object.<string, Dependency>}\n   * @private\n   */\n  this._dependencies = {};\n}\n\n/**\n * @param {string} name\n * @returns {Dependency}\n */\nContainer.prototype.get = function (name) {\n  if (typeof this._dependencies[name] === 'undefined') {\n    this._dependencies[name] = new Dependency(this, name);\n  }\n\n  return this._dependencies[name];\n};\n\n/**\n * @returns {Dependency[]}\n */\nContainer.prototype.getAll = function () {\n  var values = [];\n\n  for (var key in this._dependencies) {\n    if (this._dependencies.hasOwnProperty(key)) {\n      values.push(this._dependencies[key]);\n    }\n  }\n\n  return values;\n};\n\n/**\n * @param {string[]|Object.<string, *>} dependencyNames\n * @returns {Promise}\n */\nContainer.prototype.resolve = function (dependencyNames) {\n  return Array.isArray(dependencyNames) ?\n    this._resolveAsArray(dependencyNames) :\n    this._resolveAsObject(dependencyNames);\n};\n\n/**\n * @param {string[]} dependencyNames\n * @returns {Promise}\n * @private\n */\nContainer.prototype._resolveAsArray = function (dependencyNames) {\n  return Promise.all(dependencyNames.map(function (name) {\n    return this.get(name).resolve();\n  }.bind(this)));\n};\n\n/**\n * @param {Object.<string, *>} dependencyNames\n * @returns {Promise}\n * @private\n */\nContainer.prototype._resolveAsObject = function (dependencyNames) {\n  var names = Object.keys(dependencyNames);\n\n  return this\n    ._resolveAsArray(names)\n    .then(function (dependencies) {\n      var obj = {};\n\n      dependencies.forEach(function (dependency, i) {\n        obj[names[i]] = dependency;\n      }.bind(this));\n\n      return obj;\n    }.bind(this));\n};\n\nmodule.exports = Container;","/home/travis/build/npmtest/node-npmtest-node-dm/node_modules/node-dm/src/dependency.js":"'use strict';\n\nglobal.Promise = global.Promise || require('promise');\n\n/**\n * @param {Container} container\n * @param {string} name\n * @class\n */\nfunction Dependency(container, name) {\n  this._container = container;\n  this._name = name;\n\n  this._type = null;\n  this._depends = [];\n\n  this._resolve = null;\n  this._isResolved = false;\n\n  this._sourcePromise = new Promise(function (resolve) { this._resolve = resolve; }.bind(this));\n  this._instantiatedPromise = null;\n}\n\n/**\n * @param {string} type\n * @param {*|{ $depends: Array|Object }} value\n * @param {string[]} dependencyNames\n */\nDependency.prototype.provide = function (type, value, dependencyNames) {\n  if (this._isResolved) {\n    throw new Error('Dependency \"' + this._name + '\" was already provided');\n  }\n\n  this._isResolved = true;\n\n  this._type = type;\n\n  if (type !== 'value' && dependencyNames) {\n    this._depends = dependencyNames;\n  }\n\n  this._resolve(value);\n};\n\n/**\n * @returns {string}\n */\nDependency.prototype.getName = function () {\n  return this._name;\n};\n\n/**\n * @returns {Promise}\n */\nDependency.prototype.resolve = function () {\n  if (!this._instantiatedPromise) {\n    this._instantiatedPromise = this._getInstantiatedPromise();\n  }\n\n  return this._instantiatedPromise;\n};\n\n/**\n * @returns {Promise}\n */\nDependency.prototype.getSourcePromise = function () {\n  return this._sourcePromise;\n};\n\n/**\n * @returns {string[]}\n */\nDependency.prototype.getDependencyNames = function () {\n  return Array.isArray(this._depends) ? this._depends : Object.keys(this._depends);\n};\n\n/**\n * @returns {Promise}\n */\nDependency.prototype.getDependencies = function () {\n  return Promise.all(\n    this.getDependencyNames().map(function (name) {\n      var dependency = this._container.get(name);\n      return dependency\n        .getSourcePromise()\n        .then(function () { return dependency; });\n    }.bind(this))\n  );\n};\n\n/**\n * @returns {boolean}\n */\nDependency.prototype.isResolved = function () {\n  return this._isResolved;\n};\n\n/**\n * @returns {Promise}\n * @private\n */\nDependency.prototype._getInstantiatedPromise = function () {\n  return Promise\n    .all([\n      this._sourcePromise,\n      this._checkForCircularDependencies()\n    ])\n    .then(function (result) {\n      return Promise.all([result[0], this._container.resolve(this._depends)]);\n    }.bind(this))\n    .then(function (result) { return this._instantiate(result[0], result[1]); }.bind(this));\n};\n\n/**\n * @param {*} source\n * @param {Array|Object} dependencies\n * @returns {*}\n * @private\n */\nDependency.prototype._instantiate = function (source, dependencies) {\n  if (this._type === 'value') {\n    return source;\n  }\n  else if (this._type === 'class') {\n    return this._instantiateFromClass(source, dependencies);\n  }\n  else if (this._type === 'factory') {\n    return this._instantiateFromFactory(source, dependencies);\n  }\n};\n\n/**\n * @param {Function} constructor\n * @param {Array|Object} dependencies\n * @returns {Object}\n * @private\n */\nDependency.prototype._instantiateFromClass = function (constructor, dependencies) {\n  var dependencyNames = this._depends;\n\n  var F = Array.isArray(dependencyNames) ?\n    constructor.bind.apply(constructor, [null].concat(dependencies)) :\n    constructor.bind(null, dependencies);\n\n  return new F();\n};\n\n/**\n * @param {Function} factory\n * @param {Array|Object} dependencies\n * @returns {*}\n * @private\n */\nDependency.prototype._instantiateFromFactory = function (factory, dependencies) {\n  return Array.isArray(this._depends) ?\n    factory.apply(null, dependencies) :\n    factory.call(null, dependencies);\n};\n\n/**\n * @returns {Promise}\n * @private\n */\nDependency.prototype._checkForCircularDependencies = function () {\n  var link           = [this.getName()],\n      alreadyChecked = [];\n\n  function checkIfDependencyIsSelf(dependency, subDependencies) {\n    return Promise.all(subDependencies.map(function (subDependency) {\n      link.push(subDependency.getName());\n\n      if (alreadyChecked.indexOf(subDependency) >= 0) {\n        return;\n      }\n\n      alreadyChecked.push(subDependency);\n\n      if (subDependency === dependency) {\n        throw new Error(\n          'Circular dependency found: ' +\n          link\n            .map(function (part) { return '\"' + part + '\"'; })\n            .join(' < ')\n        );\n      }\n      else {\n        return checkThirdLevelDependencies(dependency, subDependency);\n      }\n    }));\n  }\n\n  function checkThirdLevelDependencies(dependency, subDependency) {\n    return subDependency\n      .getDependencies()\n      .then(function (subDependencies) {\n        return checkIfDependencyIsSelf(dependency, subDependencies);\n      });\n  }\n\n  return checkThirdLevelDependencies(this, this);\n};\n\nmodule.exports = Dependency;"}